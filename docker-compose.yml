version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: arsarazi_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: arsarazi_db
      POSTGRES_USER: arsarazi_user
      POSTGRES_PASSWORD: arsarazi123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - arsarazi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arsarazi_user -d arsarazi_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  backend:
    build: .
    container_name: arsarazi_backend
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: arsarazi_db
      DB_USER: arsarazi_user
      DB_PASSWORD: arsarazi123
      JWT_SECRET: arsarazi_super_secret_jwt_key_2024_production
      FRONTEND_URL: http://localhost:5000
    ports:
      - "5000:5000"
    volumes:
      - uploads_data:/app/uploads
      - ./public:/app/public
    networks:
      - arsarazi_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 10 &&
        npm run migrate &&
        npm run seed &&
        npm start
      "

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: arsarazi_nginx
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - arsarazi_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  arsarazi_network:
    driver: bridge